/* creates the first layer: `body`.

Similar to how we have six levels of priority based on origin and importance,
cascade layers enable us to create sub-origin level of priority within any of
those origins.


@layer layout {
    body {
       modify here
    }
  }


You can import more than one CSS file into a single layer. The following
declaration imports two separate files into a single social layer:

@import url(comments.css) layer(social);
@import url(sm-icons.css) layer(social);
*/

/*
To add styles to a named nested layer, use the dot notation:

@layer example.layout {
  main {
    width: 50vw;
  }
}
*/

.inline_content {
    display: flex;
    justify-content: center;
    width: 400px;
    position: calc();
}

.diviser {
    border-right: solid;
    border-color: black;
    margin: 3% 3px;
    border-width: 2px;
}

.in_center {
    position: relative;
    text-align: center;
    padding: 0px 5% 0% 5%;
    margin-left: 15%;
    margin-right: 15%;
    width: 60%;
}

/* it's best to quote font names that contains spaces to avoid confusion by the
interpreter to misunderstand with a reserve keyword os something   */
.font_dif {
  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
}

/*
The font-size of an element is inherited from that element's parent element. This
all starts with the root element of the entire document — <html> — the standard
font-size of which is set to 16px across browsers. Any paragraph (or another
element that doesn't have a different size set by the browser) inside the root
element will have a final size of 16px. Other elements may have different default
sizes. For example, an h1 element has a size of 2em set by default, so it will
have a final size of 32px.
*/

/* we can set multiple shadows to the same text: */
.with_shadow {
  text-shadow:
    1px 1px 1px red, /* just separete with commas */
    2px 2px 1px red;
}

/*
to exhibit a font the computer might not have, we can use @font-face on the
beggining of the css file to specify a  file containing the font witch the
users will download:

@font-face {
  font-family: "myFont";
  src: url("myFont.woff2");
}

then we can specify the name of the font we just downloaded, to be used normaly:

tml {
  font-family: "myFont", "Bitstream Vera Serif", serif;
}

you can also do like this:

@font-face {
  font-family: "zantrokeregular";
  src:
    url("zantroke-webfont.woff2") format("woff2"),
    url("zantroke-webfont.woff") format("woff");
  font-weight: normal;
  font-style: normal;
}

which will import the zantrokeregular font looking in the .woff2 file, if the
browser can't open it, it will try the .woff file, then we specify the wight
and style of the font to be normal
*/

.grid_1 {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
  gap: 10px;
}

.box1 {
  grid-column: 2 / 4;
  grid-row: 1;
}

.box2 {
  grid-column: 1;
  grid-row: 1 / 3;
}

.box3 {
  grid-row: 2;
  grid-column: 3;
}

/* we can test if the user's supports certain features using @supports:

@supports (grid-template-rows: subgrid) {
  .wrapper {
    grid-template-rows: subgrid;
    gap: 10px;
    background-color: lightblue;
    text-align: center;
  }
}

this code will define the rulesets if the browser supports the property
and value the parenthesys

Feature queries are supported in all modern browsers. Write your CSS for fully supported features first,
outside of any feature queries. Once your site is usable and accessible to all users, add new features
within feature query blocks. Browsers that support the feature queried can then render the newer CSS
inside the feature query block. Use the approach of writing well-supported CSS first, then enhancing
features based on support.
*/